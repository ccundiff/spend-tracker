# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: spend-tracker
# app and org for use with dashboard.serverless.com
#app: your-app-name
org: chase3

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

plugins:
  - "@fauna-labs/serverless-fauna"
fauna:
  client:
    secret: ${env:SPEND_TRACKING_DB_KEY}
    domain: db.us.fauna.com
    # port: 433
    # scheme: https
  collections:
    Users:
      name: Users
    Transactions:
      name: Transactions
    DailySpendSummaries:
      name: DailySpendSummaries
  indexes:
    transactions_by_plaid_id:
      name: transactions_by_plaid_id
      source:
        collection: ${self:fauna.collections.Transactions.name}
      terms:
        fields:
          - data.plaidTransactionId
      unique: true
    transactions_by_date:
      name: transactions_by_date
      source:
        collection: ${self:fauna.collections.Transactions.name}
      terms:
        fields:
          - data.date
    daily_spend_summaries_by_date:
      name: daily_spend_summaries_by_date
      source:
        collection: ${self:fauna.collections.DailySpendSummaries.name}
      terms:
        fields:
          - data.date
      unique: true
    daily_spend_summaries_by_month:
      name: daily_spend_summaries_by_month
      source:
        collection: ${self:fauna.collections.DailySpendSummaries.name}
      terms:
        fields:
          - data.month

provider:
  name: aws
  profile: personal
  runtime: go1.x
  lambdaHashingVersion: 20201221

# you can overwrite defaults here
#  stage: dev
  region: us-west-2

# you can add statements to the Lambda function's IAM Role here
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "*"
          Resource: "*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

package:
  patterns:
    - '!./**'
    - ./bin/**

functions:
  transaction-importer:
    handler: bin/transaction-importer
    events:
      - schedule: cron(50, 3, *, *, ?, *)
#    events:
#      - httpApi:
#          path: /hello
#          method: get
#  world:
#    handler: bin/world
#    events:
#      - httpApi:
#          path: /world
#          method: get
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
# events:
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
